#!/usr/bin/env python3

import struct
import sys

MODE = 'NES'

in_name = sys.argv[1]
IN = open(in_name, 'rb')
IN.seek(40)
frame_count = struct.unpack('<i', IN.read(4))[0] // 5

if in_name.endswith('.wav'):
    out_name = in_name[:-4] + '-mono.wav'
else:
    out_name = in_name + '.mono.wav'
OUT = open(out_name, 'wb')
OUT.write(b'RIFF')
OUT.write(struct.pack('<i', 36 + 0)) # ChunkSize
OUT.write(b'WAVE')
OUT.write(b'fmt ')
OUT.write(struct.pack('<i', 16)) # Subchunk1Size
if MODE == 'Mesen':
    OUT.write(struct.pack('<h', 1)) # AudioFormat (1 = PCM, 3 = float)
else:
    OUT.write(struct.pack('<h', 3)) # AudioFormat (1 = PCM, 3 = float)
OUT.write(struct.pack('<h', 1)) # NumChannels
OUT.write(struct.pack('<i', 1789773)) # SampleRate
OUT.write(struct.pack('<i', 1789773 * 1 * 4)) # ByteRate = SampleRate * NumChannels * BitsPerSample/8
OUT.write(struct.pack('<h', 1 * 4)) # BlockAlign = NumChannels * BitsPerSample/8
OUT.write(struct.pack('<h', 32)) # BitsPerSample
OUT.write(b'data')
OUT.write(struct.pack('<i', 0)) # Subchunk2Size

def divide(num, denom):
    #if denom == 0:
    #    return 0
    return num / denom

def mix(pulse1, pulse2, triangle, noise, dmc):
    # https://wiki.nesdev.com/w/index.php/APU_Mixer
    try:
        pulse_out = divide(95.88, divide(8128.0, pulse1 + pulse2) + 100.0)
    except ZeroDivisionError:
        pulse_out = 0
    try:
        tnd_out = divide(159.79, divide(1.0, triangle / 8227.0 + noise / 12241.0 + dmc / 22638.0) + 100.0)
    except ZeroDivisionError:
        tnd_out = 0
    return pulse_out + tnd_out

def mix_mesen(pulse1, pulse2, triangle, noise, dmc):
    squareOutput = pulse1 + pulse2
    try:
        pulse_vol = (477600.0 / (8128.0 / squareOutput + 100.0))
    except ZeroDivisionError:
        pulse_vol = 0
    tndOutput = 3 * triangle + 2 * noise + dmc
    try:
        tnd_vol = (818350.0 / (24329.0 / tndOutput + 100.0))
    except ZeroDivisionError:
        tnd_vol = 0
    return int(pulse_vol + tnd_vol)

def find_triangle_discontinuities(IN):
    IN.seek(40)
    frame_count = struct.unpack('<i', IN.read(4))[0] // 5
    prev_triangle = None
    last_change = None
    interpolation_ranges = []
    for i in range(frame_count):
        frame = IN.read(5)
        channels = struct.unpack('5B', frame)
        triangle = channels[2]
        if i > 0:
            if last_change is not None:
                if abs(triangle - prev_triangle) > 1:
                    print('Pop detected in triangle channel at sample', i)
                    interpolation_ranges.append((last_change, (i, triangle)))
            if abs(triangle - prev_triangle) == 1:
                last_change = (i, triangle)
        prev_triangle = triangle
        if i % 1789773 == 0:
            print('{:0.2f}%'.format(100 * i / frame_count))
    return interpolation_ranges

print('Scanning input file for pops in triangle channel...')
interpolation_ranges = find_triangle_discontinuities(IN)

print('Writing monaural output file...')
IN.seek(44)
current_range = None
for i in range(frame_count):
    if current_range is not None and i >= range_end[0]:
        current_range = None
    if interpolation_ranges != [] and i >= interpolation_ranges[0][0][0]:
        current_range = interpolation_ranges.pop(0)
        range_begin = current_range[0]
        range_end = current_range[1]
        slope = (range_end[1] - range_begin[1]) / (range_end[0] - range_begin[0])
    frame = IN.read(5)
    channels = list(struct.unpack('5B', frame))
    if current_range:
        triangle = channels[2]
        triangle = triangle + (i - range_begin[0]) * slope
        channels[2] = triangle
    if MODE == 'Mesen':
        sample = mix_mesen(*channels)
        OUT.write(struct.pack('<i', sample))
    else:
        sample = mix(*channels)
        OUT.write(struct.pack('<f', sample))
    if i % 1789773 == 0:
        print('{:0.2f}%'.format(100 * i / frame_count))
        eof = OUT.tell()
        OUT.seek(4)
        OUT.write(struct.pack('<i', 36 + i * 4))
        OUT.seek(40)
        OUT.write(struct.pack('<i', i * 4))
        OUT.seek(eof)

OUT.seek(4)
OUT.write(struct.pack('<i', 36 + frame_count * 4))
OUT.seek(40)
OUT.write(struct.pack('<i', frame_count * 4))
