#!/usr/bin/env python3

import struct

IN = open('in.wav', 'rb')
IN.seek(40)
frame_count = struct.unpack('<i', IN.read(4))[0] >> 3

OUT = open('out.wav', 'wb')
OUT.write(b'RIFF')
OUT.write(struct.pack('<i', 36 + 0)) # ChunkSize
OUT.write(b'WAVE')
OUT.write(b'fmt ')
OUT.write(struct.pack('<i', 16)) # Subchunk1Size
OUT.write(struct.pack('<h', 1)) # AudioFormat (1 = PCM, 3 = float)
OUT.write(struct.pack('<h', 1)) # NumChannels
OUT.write(struct.pack('<i', 1789773)) # SampleRate
OUT.write(struct.pack('<i', 1789773 * 1 * 2)) # ByteRate = SampleRate * NumChannels * BitsPerSample/8
OUT.write(struct.pack('<h', 1 * 2)) # BlockAlign = NumChannels * BitsPerSample/8
OUT.write(struct.pack('<h', 16)) # BitsPerSample
OUT.write(b'data')
OUT.write(struct.pack('<i', 0)) # Subchunk2Size

def find_triangle_discontinuities(IN):
    IN.seek(40)
    frame_count = struct.unpack('<i', IN.read(4))[0] >> 3
    prev_triangle = None
    last_change = None
    interpolation_ranges = []
    for i in range(frame_count):
        frame = IN.read(5)
        channels = struct.unpack('5B', frame)
        triangle = channels[2]
        if i > 0:
            if last_change is not None:
                if abs(triangle - prev_triangle) > 1:
                    print('Triangle discontinuous at sample {}: changed to {}'.format(i, triangle))
                    print('Previous change was at {} to {}'.format(*last_change))
                    interpolation_ranges.append((last_change, (i, triangle)))
            if abs(triangle - prev_triangle) == 1:
                last_change = (i, triangle)
        prev_triangle = triangle
    return interpolation_ranges

interpolation_ranges = find_triangle_discontinuities(IN)

IN.seek(44)
current_range = None
for i in range(frame_count):
    if current_range is not None and i >= range_end[0]:
        current_range = None
        print('Range has ended:', i)
    if interpolation_ranges != [] and i >= interpolation_ranges[0][0][0]:
        current_range = interpolation_ranges.pop(0)
        range_begin = current_range[0]
        range_end = current_range[1]
        slope = (range_end[1] - range_begin[1]) / (range_end[0] - range_begin[0])
        print('Range has begun:', i, current_range, slope)
    frame = IN.read(5)
    channels = struct.unpack('5B', frame)
    triangle = channels[2]
    if current_range:
        triangle = triangle + (i - range_begin[0]) * slope
    OUT.write(struct.pack('<h', int(triangle * 2048)))
    if i % 1789773 == 0:
        print('{:0.2f}%'.format(100 * i / frame_count))
        eof = OUT.tell()
        OUT.seek(4)
        OUT.write(struct.pack('<i', 36 + i * 4))
        OUT.seek(40)
        OUT.write(struct.pack('<i', i * 4))
        OUT.seek(eof)

OUT.seek(4)
OUT.write(struct.pack('<i', 36 + frame_count * 4))
OUT.seek(40)
OUT.write(struct.pack('<i', frame_count * 4))
